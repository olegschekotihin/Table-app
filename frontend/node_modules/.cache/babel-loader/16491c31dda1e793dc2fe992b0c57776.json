{"ast":null,"code":"var _jsxFileName = \"D:\\\\Table-app\\\\frontend\\\\src\\\\components\\\\Table\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Row from \"../Row\";\nimport HeadRow from \"../HeadRow\";\nimport Pagination from \"../Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Table({\n  pageSize,\n  usersData\n}) {\n  _s();\n\n  const [filterValue, setFilterValue] = useState('');\n  const [dataValue, setDataValue] = useState('');\n  const [newUsers, setNewUsers] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  let rowInPage = pageSize ? pageSize : 10;\n  const initDataLength = usersData.length;\n  const [currentDataLength, setCurrentDataLength] = useState(initDataLength); // Get current posts\n\n  const indexOfLastPost = currentPage * rowInPage;\n  const indexOfFirstPost = indexOfLastPost - rowInPage;\n  const currentData = newUsers.slice(indexOfFirstPost, indexOfLastPost);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  useEffect(() => {\n    setNewUsers(usersData);\n    setCurrentDataLength(usersData.length);\n  }, [usersData]);\n  useEffect(() => {\n    let newUserData = usersData.filter(user => {\n      let keys = Object.keys(user);\n      let current; // console.log('keys', keys)\n\n      console.log('dataValue', dataValue);\n      keys.forEach((elem, index) => {\n        console.log('elem', elem);\n\n        if (elem === dataValue) {\n          console.log('1');\n          current = elem[index];\n        }\n      }); // for (let i = 0, l = keys.length; i < l; i++) {\n      //     if(keys[i] === dataValue) {\n      //         current = keys[i]\n      //     }\n      // }\n\n      if (user[current] == filterValue) {\n        return user;\n      }\n    });\n\n    if (newUserData.length !== 0) {\n      setNewUsers(newUserData);\n      setCurrentDataLength(newUserData.length);\n    } else {\n      setNewUsers(usersData);\n      setCurrentDataLength(usersData.length);\n    }\n  }, [filterValue]);\n\n  const onChange = event => {\n    setFilterValue(event.target.value);\n    setDataValue(event.target.dataset[\"name\"]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(HeadRow, {\n          param: newUsers,\n          onchange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          rows: currentData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      postsPerPage: rowInPage,\n      totalPosts: currentDataLength,\n      onPaginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Table, \"mwMq8HHDuvKbLTDeJjJYr349plM=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["D:/Table-app/frontend/src/components/Table/index.tsx"],"names":["React","useEffect","useState","Row","HeadRow","Pagination","Table","pageSize","usersData","filterValue","setFilterValue","dataValue","setDataValue","newUsers","setNewUsers","currentPage","setCurrentPage","rowInPage","initDataLength","length","currentDataLength","setCurrentDataLength","indexOfLastPost","indexOfFirstPost","currentData","slice","paginate","pageNumber","newUserData","filter","user","keys","Object","current","console","log","forEach","elem","index","onChange","event","target","value","dataset"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmBC,SAAnB,EAA8BC,QAA9B,QAA6C,OAA7C;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;;AAOA,SAASC,KAAT,CAAe;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAf,EAAiD;AAAA;;AAC7C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAS,EAAT,CAA9C;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAS,EAAT,CAA1C;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,CAAD,CAA9C;AACA,MAAIe,SAAS,GAAGV,QAAQ,GAAGA,QAAH,GAAc,EAAtC;AACA,QAAMW,cAAc,GAAGV,SAAS,CAACW,MAAjC;AACA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CnB,QAAQ,CAACgB,cAAD,CAA1D,CAP6C,CAQ7C;;AACA,QAAMI,eAAe,GAAGP,WAAW,GAAGE,SAAtC;AACA,QAAMM,gBAAgB,GAAGD,eAAe,GAAGL,SAA3C;AACA,QAAMO,WAAW,GAAGX,QAAQ,CAACY,KAAT,CAAeF,gBAAf,EAAiCD,eAAjC,CAApB;;AAEA,QAAMI,QAAQ,GAAIC,UAAD,IAAwBX,cAAc,CAACW,UAAD,CAAvD;;AAEA1B,EAAAA,SAAS,CAAE,MAAM;AACba,IAAAA,WAAW,CAACN,SAAD,CAAX;AACAa,IAAAA,oBAAoB,CAACb,SAAS,CAACW,MAAX,CAApB;AACH,GAHQ,EAGN,CAACX,SAAD,CAHM,CAAT;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI2B,WAAW,GAAGpB,SAAS,CAACqB,MAAV,CAAkBC,IAAD,IAAiB;AAChD,UAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,IAAZ,CAAX;AACA,UAAIG,OAAJ,CAFgD,CAGhD;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBxB,SAAzB;AAEAoB,MAAAA,IAAI,CAACK,OAAL,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1BJ,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBE,IAApB;;AACA,YAAGA,IAAI,KAAK1B,SAAZ,EAAuB;AACnBuB,UAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAF,UAAAA,OAAO,GAAGI,IAAI,CAACC,KAAD,CAAd;AACH;AACJ,OAND,EANgD,CAahD;AACA;AACA;AACA;AACA;;AACA,UAAGR,IAAI,CAACG,OAAD,CAAJ,IAAiBxB,WAApB,EAAiC;AAC7B,eAAOqB,IAAP;AACH;AACJ,KArBiB,CAAlB;;AAsBA,QAAGF,WAAW,CAACT,MAAZ,KAAuB,CAA1B,EAA8B;AAC1BL,MAAAA,WAAW,CAACc,WAAD,CAAX;AACAP,MAAAA,oBAAoB,CAACO,WAAW,CAACT,MAAb,CAApB;AACH,KAHD,MAGO;AACHL,MAAAA,WAAW,CAACN,SAAD,CAAX;AACAa,MAAAA,oBAAoB,CAACb,SAAS,CAACW,MAAX,CAApB;AACH;AACJ,GA9BQ,EA8BP,CAACV,WAAD,CA9BO,CAAT;;AAgCA,QAAM8B,QAAQ,GAAIC,KAAD,IAAe;AAC5B9B,IAAAA,cAAc,CAAC8B,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACA9B,IAAAA,YAAY,CAAC4B,KAAK,CAACC,MAAN,CAAaE,OAAb,CAAqB,MAArB,CAAD,CAAZ;AACH,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI;AAAO,MAAA,SAAS,EAAC,OAAjB;AAAA,8BACI;AAAA,+BACI,QAAC,OAAD;AACI,UAAA,KAAK,EAAE9B,QADX;AAEI,UAAA,QAAQ,EAAE0B;AAFd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI;AAAA,+BACI,QAAC,GAAD;AACI,UAAA,IAAI,EAAEf;AADV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAaI,QAAC,UAAD;AACI,MAAA,YAAY,EAAEP,SADlB;AAEI,MAAA,UAAU,EAAEG,iBAFhB;AAGI,MAAA,UAAU,EAAEM;AAHhB;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH;;GA9EQpB,K;;KAAAA,K;AAgFT,eAAeA,KAAf","sourcesContent":["import React, {FC, useEffect, useState} from \"react\";\nimport Row from \"../Row\"\nimport HeadRow from \"../HeadRow\";\nimport Pagination from \"../Pagination\";\n\nexport interface TableProps {\n    pageSize?: number\n    usersData: any\n}\n\nfunction Table({pageSize, usersData}:TableProps) {\n    const [filterValue, setFilterValue] = useState<string>('');\n    const [dataValue, setDataValue] = useState<string>('');\n    const [newUsers, setNewUsers] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    let rowInPage = pageSize ? pageSize : 10\n    const initDataLength = usersData.length\n    const [currentDataLength, setCurrentDataLength] = useState(initDataLength)\n    // Get current posts\n    const indexOfLastPost = currentPage * rowInPage;\n    const indexOfFirstPost = indexOfLastPost - rowInPage;\n    const currentData = newUsers.slice(indexOfFirstPost, indexOfLastPost);\n\n    const paginate = (pageNumber: number) => setCurrentPage(pageNumber);\n\n    useEffect( () => {\n        setNewUsers(usersData)\n        setCurrentDataLength(usersData.length)\n    }, [usersData])\n\n    useEffect(() => {\n        let newUserData = usersData.filter((user:string) => {\n            let keys = Object.keys(user)\n            let current:any;\n            // console.log('keys', keys)\n            console.log('dataValue', dataValue)\n\n            keys.forEach((elem, index) => {\n                console.log('elem', elem)\n                if(elem === dataValue) {\n                    console.log('1')\n                    current = elem[index]\n                }\n            })\n            // for (let i = 0, l = keys.length; i < l; i++) {\n            //     if(keys[i] === dataValue) {\n            //         current = keys[i]\n            //     }\n            // }\n            if(user[current] == filterValue) {\n                return user\n            }\n        })\n        if(newUserData.length !== 0 ) {\n            setNewUsers(newUserData)\n            setCurrentDataLength(newUserData.length)\n        } else {\n            setNewUsers(usersData)\n            setCurrentDataLength(usersData.length)\n        }\n    },[filterValue])\n\n    const onChange = (event:any) => {\n        setFilterValue(event.target.value);\n        setDataValue(event.target.dataset[\"name\"]);\n    }\n\n    return (\n        <div className=\"container\">\n            <table className=\"table\">\n                <thead>\n                    <HeadRow\n                        param={newUsers}\n                        onchange={onChange}\n                    />\n                </thead>\n                <tbody>\n                    <Row\n                        rows={currentData}/>\n                </tbody>\n            </table>\n            <Pagination\n                postsPerPage={rowInPage}\n                totalPosts={currentDataLength}\n                onPaginate={paginate}\n            />\n        </div>\n    );\n}\n\nexport default Table"]},"metadata":{},"sourceType":"module"}