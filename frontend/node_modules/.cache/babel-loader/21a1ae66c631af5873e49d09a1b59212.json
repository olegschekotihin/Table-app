{"ast":null,"code":"var _jsxFileName = \"D:\\\\Table-app\\\\frontend\\\\src\\\\components\\\\Table\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Row from \"../BodyTable/Row\";\nimport HeadRow from \"../HeadTable/HeadRow\";\nimport Pagination from \"../BodyTable/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Table({\n  pageSize,\n  usersData\n}) {\n  _s();\n\n  const [filterDataValue, setFilterDataValue] = useState('');\n  const [dataValue, setDataValue] = useState('');\n  const [newUsersData, setNewUsersData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const initDataLength = usersData.length;\n  const [currentDataLength, setCurrentDataLength] = useState(initDataLength);\n  let rowInPage = pageSize ? pageSize : 10; // Get current posts\n\n  const indexOfLastPost = currentPage * rowInPage;\n  const indexOfFirstPost = indexOfLastPost - rowInPage;\n  const currentData = newUsersData.slice(indexOfFirstPost, indexOfLastPost);\n  useEffect(() => {\n    setNewUsersData(usersData);\n    setCurrentDataLength(usersData.length);\n  }, [usersData]);\n  useEffect(() => {\n    let newUserData = usersData.filter(user => {\n      let keysUser = Object.keys(user);\n      let currentElem;\n      keysUser.forEach((elem, index) => {\n        if (elem === dataValue) {\n          currentElem = elem;\n        }\n      });\n\n      if (user[currentElem] == filterDataValue) {\n        return user;\n      }\n    });\n\n    if (newUserData.length !== 0) {\n      setNewUsersData(newUserData);\n      setCurrentDataLength(newUserData.length);\n    } else {\n      setNewUsersData(usersData);\n      setCurrentDataLength(usersData.length);\n    }\n  }, [filterDataValue]);\n\n  const onChange = event => {\n    setFilterDataValue(event.target.value);\n    setDataValue(event.target.dataset[\"name\"]);\n  };\n\n  const onPaginate = pageNumber => setCurrentPage(pageNumber);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(HeadRow, {\n          param: newUsersData,\n          onchange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          rows: currentData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      postsPerPage: rowInPage,\n      totalPosts: currentDataLength,\n      onPaginate: onPaginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Table, \"xMrIzwASj9JzMhPZfR93i/jpzY4=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["D:/Table-app/frontend/src/components/Table/index.tsx"],"names":["React","useEffect","useState","Row","HeadRow","Pagination","Table","pageSize","usersData","filterDataValue","setFilterDataValue","dataValue","setDataValue","newUsersData","setNewUsersData","currentPage","setCurrentPage","initDataLength","length","currentDataLength","setCurrentDataLength","rowInPage","indexOfLastPost","indexOfFirstPost","currentData","slice","newUserData","filter","user","keysUser","Object","keys","currentElem","forEach","elem","index","onChange","event","target","value","dataset","onPaginate","pageNumber"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport Row from \"../BodyTable/Row\"\nimport HeadRow from \"../HeadTable/HeadRow\";\nimport Pagination from \"../BodyTable/Pagination\";\n\nexport interface TableProps {\n  pageSize?: number\n  usersData: any\n}\n\nfunction Table({pageSize, usersData}:TableProps) {\n  const [filterDataValue, setFilterDataValue] = useState<string>('');\n  const [dataValue, setDataValue] = useState<string>('');\n  const [newUsersData, setNewUsersData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const initDataLength = usersData.length\n  const [currentDataLength, setCurrentDataLength] = useState(initDataLength)\n  let rowInPage = pageSize ? pageSize : 10\n  // Get current posts\n  const indexOfLastPost = currentPage * rowInPage;\n  const indexOfFirstPost = indexOfLastPost - rowInPage;\n  const currentData = newUsersData.slice(indexOfFirstPost, indexOfLastPost);\n\n  useEffect( () => {\n    setNewUsersData(usersData)\n    setCurrentDataLength(usersData.length)\n  }, [usersData])\n\n  useEffect(() => {\n    let newUserData = usersData.filter((user:string) => {\n      let keysUser = Object.keys(user)\n      let currentElem:any;\n\n      keysUser.forEach((elem, index) => {\n        if(elem === dataValue) {\n          currentElem = elem\n        }\n      })\n      if(user[currentElem] == filterDataValue) {\n        return user\n      }\n    })\n    if(newUserData.length !== 0 ) {\n      setNewUsersData(newUserData)\n      setCurrentDataLength(newUserData.length)\n    } else {\n      setNewUsersData(usersData)\n      setCurrentDataLength(usersData.length)\n    }\n  },[filterDataValue])\n\n  const onChange = (event:any) => {\n    setFilterDataValue(event.target.value);\n    setDataValue(event.target.dataset[\"name\"]);\n  }\n\n  const onPaginate = (pageNumber: number) => setCurrentPage(pageNumber);\n\n  return (\n    <div className=\"container\">\n      <table className=\"table\">\n        <thead>\n        <HeadRow\n          param={newUsersData}\n          onchange={onChange}\n        />\n        </thead>\n        <tbody>\n        <Row\n          rows={currentData}/>\n        </tbody>\n      </table>\n      <Pagination\n        postsPerPage={rowInPage}\n        totalPosts={currentDataLength}\n        onPaginate={onPaginate}\n      />\n    </div>\n  );\n}\n\nexport default Table"]},"metadata":{},"sourceType":"module"}