{"ast":null,"code":"var _jsxFileName = \"/home/oschekotihin/work/Table-app/frontend/src/components/Table/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Row from \"../Row/index\";\nimport HeadRow from \"../HeadRow\";\nimport Pagination from \"../Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Table({\n  pageSize,\n  usersData\n}) {\n  _s();\n\n  const [filterValue, setFilterValue] = useState();\n  const [dataValue, setDataValue] = useState();\n  const [newUsers, setNewUsers] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  let rowInPage = pageSize ? pageSize : null;\n  let currentDataLength = usersData.length; // Get current posts\n\n  const indexOfLastPost = currentPage * rowInPage;\n  const indexOfFirstPost = indexOfLastPost - rowInPage;\n  const currentData = usersData.slice(indexOfFirstPost, indexOfLastPost);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  useEffect(() => {\n    setNewUsers(usersData);\n  }, [usersData]);\n  useEffect(() => {\n    let newUserData = usersData.filter(elem => {\n      let keys = Object.keys(elem);\n      let current = null;\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        if (keys[i] === dataValue) {\n          current = keys[i];\n        }\n      }\n\n      if (elem[current] === filterValue) {\n        return elem;\n      }\n    });\n\n    if (newUserData.length !== 0) {\n      setHidePagination(true);\n\n      if (newUserData.length < rowInPage) {\n        setHidePagination(false);\n      }\n\n      setNewUsers(newUserData);\n    } else {\n      setHidePagination(true);\n      setNewUsers(usersData);\n    }\n  }, [filterValue]);\n\n  const onChange = event => {\n    setFilterValue(event.target.value);\n    console.log('filrValue', filterValue);\n    setDataValue(event.target.dataset[\"name\"]);\n    console.log('dataValue', dataValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(HeadRow, {\n          param: newUsers,\n          callback: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          rows: currentData,\n          dataRow: newUsers,\n          numberRow: rowInPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      postsPerPage: rowInPage,\n      totalPosts: currentDataLength,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Table, \"TmHrQI1YIQHREk5yoCOKrX+L2ow=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/home/oschekotihin/work/Table-app/frontend/src/components/Table/index.js"],"names":["React","useEffect","useState","Row","HeadRow","Pagination","Table","pageSize","usersData","filterValue","setFilterValue","dataValue","setDataValue","newUsers","setNewUsers","currentPage","setCurrentPage","rowInPage","currentDataLength","length","indexOfLastPost","indexOfFirstPost","currentData","slice","paginate","pageNumber","newUserData","filter","elem","keys","Object","current","i","l","setHidePagination","onChange","event","target","value","console","log","dataset"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Row from \"../Row/index\"\nimport HeadRow from \"../HeadRow\";\nimport Pagination from \"../Pagination\";\n\nfunction Table({pageSize, usersData}) {\n    const [filterValue, setFilterValue] = useState();\n    const [dataValue, setDataValue] = useState();\n    const [newUsers, setNewUsers] = useState([]);\n\n\n    const [currentPage, setCurrentPage] = useState(1);\n\n    let rowInPage = pageSize ? pageSize : null\n    let currentDataLength = usersData.length\n\n    // Get current posts\n    const indexOfLastPost = currentPage * rowInPage;\n    const indexOfFirstPost = indexOfLastPost - rowInPage;\n    const currentData = usersData.slice(indexOfFirstPost, indexOfLastPost);\n\n    const paginate = pageNumber => setCurrentPage(pageNumber);\n\n    useEffect( () => {\n        setNewUsers(usersData)\n    }, [usersData])\n\n    useEffect(() => {\n        let newUserData = usersData.filter(elem => {\n            let keys = Object.keys(elem)\n            let current = null;\n            for (let i = 0, l = keys.length; i < l; i++) {\n                if(keys[i] === dataValue) {\n                    current = keys[i]\n                }\n            }\n            if(elem[current] === filterValue) {\n                return elem\n            }\n        })\n        if(newUserData.length !==0 ) {\n            setHidePagination(true)\n            if(newUserData.length < rowInPage) {\n                setHidePagination(false)\n            }\n            setNewUsers(newUserData)\n        } else {\n            setHidePagination(true)\n            setNewUsers(usersData)\n\n        }\n    },[filterValue])\n\n    const onChange = (event) => {\n        setFilterValue(event.target.value);\n        console.log('filrValue', filterValue)\n        setDataValue(event.target.dataset[\"name\"]);\n        console.log('dataValue', dataValue)\n    }\n\n    return (\n        <div className=\"container\">\n            <table className=\"table\">\n                <thead>\n                    <HeadRow\n                        param={newUsers}\n                        callback={onChange}\n                    />\n                </thead>\n                <tbody>\n                    <Row rows={currentData} dataRow={newUsers} numberRow={rowInPage}/>\n                </tbody>\n            </table>\n            <Pagination\n                postsPerPage={rowInPage}\n                totalPosts={currentDataLength}\n                paginate={paginate}\n            />\n        </div>\n    );\n}\n\nexport default Table"]},"metadata":{},"sourceType":"module"}